<MudGrid Class="align-content-center mt-16" Justify="Justify.Center" id="greetingForm">
    <MudItem   xs="12" md="6" lg="4">
        <MudPaper Class="" Elevation="3">
            <MudGrid Class="pa-10 text-center align-content-center" Justify="Justify.Center">
                @if (_chosenUsername == null && Client == null)
                {
                    <MudText Class="mr-auto mx-2">Type your username:</MudText>
                    <MudItem xs="12">
                        <MudTextField  @bind-Value="_currentUsernameInput" T="string"  TextChanged="@ValidateUsernameInput"   Label="Username" Immediate="true" Required="true" RequiredError="User name is required!"/>
                    </MudItem>
                    <MudButton Class="mx-3" Variant="Variant.Filled" Color="Color.Primary"  Disabled="@(!_isValidInput)"  @onclick="LogIn">Log in</MudButton>
                }
                else
                {
                    @if ( Client == null)
                    {
                    <MudItem xs="12" >
                    <MudText Typo="Typo.h2">Choose your weapon:</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="mx-auto"   Elevation="1" Height=" 19vh" Width="19vh">
                                            <MudButton  OnClick="@(()=>{ChooseRole(Role.O);})" Disabled="@(!IsOAvailable)" Variant="Variant.Text" Color="Color.Error" Style="font-size:19vh; width:100%; height:100%">O</MudButton>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="m-auto" Elevation="1" Height=" 19vh" Width="19vh">
                            <MudButton OnClick="@(()=>{ChooseRole(Role.X);})" Disabled="@(!IsXAvailable)" Variant="Variant.Text" Color="Color.Primary" Style="font-size:19vh; width:100%; height:100%">X</MudButton>
                        </MudPaper>
                    </MudItem>
                    }else
                    {
                        <MudText Class="d-flex" >Please wait for second player</MudText>
                        <div class="m-auto spinner-border" role="status">
                        </div>
                    }
                }
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public HubConnection? HubConnection { get; set; }
    [Parameter]
    public IGameService GameService { get; set; }
    [Parameter]
    public UserModel Opponent { get; set; }
    [Parameter]
    public UserModel Client { get; set; }
    [Parameter]
    public EventCallback<UserModel> ClientSetter { get; set; }
    [Parameter]
    public EventCallback<UserModel> OpponentSetter { get; set; }
    [Parameter]
    public EventCallback<GameStateModel> SetGameState { get; set; }
    [Parameter]
    public bool IsOAvailable { get; set; } = false;
    [Parameter]
    public bool IsXAvailable { get; set; } = false;
    private int _roomId { get; set; } = 0;
    private string _currentUsernameInput { get; set; } = "";
    private string? _chosenUsername { get; set; }
    private bool _isValidInput { get; set; } = false;

    private void ValidateUsernameInput()
    {
        _isValidInput = _currentUsernameInput.Length > 0;
    }

    private async void LogIn()
    {
        _chosenUsername = _currentUsernameInput;
        var availableRoles = GameService.GetAvaiableRolesInRoom(_roomId);
        if (!availableRoles.Contains(Role.O))
            IsOAvailable = false;
        if (!availableRoles.Contains(Role.X))
            IsXAvailable = false;
    }

    private async void ChooseRole(Role role)
    {
        if (role != Role.Observer)
            GameService.ChangeAvaiableRolesInRoom(_roomId, role, false);
        Client = new UserModel(HubConnection.ConnectionId, _chosenUsername, _roomId, role);
        GameService.AddUserToTheRoom(Client);
        await ClientSetter.InvokeAsync(Client);
        await HubConnection.SendAsync("UserConnected", Client);
        Opponent = GameService.GetOpponent(Client);
        await OpponentSetter.InvokeAsync(Opponent);
        await SetGameState.InvokeAsync(GameService.GetGameStateByRoom(_roomId));
    }

}