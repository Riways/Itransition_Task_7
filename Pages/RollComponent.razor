<MudGrid Class="align-content-center mt-16" Justify="Justify.Center" id="greetingForm">
    <MudItem   xs="12" md="6" lg="4">
        <MudPaper class="  pa-10 justify-content-center" Elevation="3" Height="40vh" Width="60vh">
            <MudText Align="Align.Center" Typo="Typo.h4">Roll the dice:</MudText>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem class="mt-8" xs="12">
                    @if (OpponentRollValue == -1)
                    {
                        <MudText Typo="Typo.h5">Second player roll:  --</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h5">Second player roll: @OpponentRollValue</MudText>
                    }
                </MudItem>
                <MudItem class="text-center" xs="12">
                    @if (RollValue == -1)
                    {
                            <MudText Align="Align.Start" Typo="Typo.h5">Your roll: --</MudText>
                            <MudButton  Variant="Variant.Filled" Color="Color.Primary" OnClick="@Roll">Roll</MudButton>
                    }
                    else
                    {
                        <MudText Align="Align.Start" Typo="Typo.h5">Your roll: @RollValue</MudText>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int RollValue { get; set; }
    [Parameter]
    public int OpponentRollValue { get; set; }
    [Parameter]
    public UserModel Client { get; set; }
    [Parameter]
    public HubConnection HubConnection { get; set; }
    [Parameter]
    public EventCallback<bool> SetIsClientTurn { get; set; }


    private async void Roll()
    {
        var roll = new Random().Next(10000);
        await HubConnection.SendAsync("UserRolled", Client, roll);
        StateHasChanged();
        if (OpponentRollValue >=0 && OpponentRollValue < roll)
        {
            await SetIsClientTurn.InvokeAsync(true);
        }
        StateHasChanged();
    }
}
